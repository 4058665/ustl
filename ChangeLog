Release 0.4-4
	* configure will now properly enable mmx compiler flags.
	* configure has a --with-profile option.
	* Fixed a bug in ostringstream format inserting extra '\0'
	* Fixed a bug in string find which sometimes did not match at the
		beginning of the text.
	* ostringstream will now use faster paged allocation.
	* New alignof specializations for cmemlink(size_t) and string(1)
	* Fixed tuple's value constructors to zero unspecified values.
	* Added parentheses around ctr argument in foreach for computed vars.
	* General simd interface for tuple optimization.
	* Proper link interface in vector, that takes element count.
	* set_terminate and set_unxpected prototypes are now available.
	* LOOKUP_TEXT_STREAMABLE macro for printing through name arrays.
	* Fixed iterator_swap to take iterators by value (reference& swap bad)
	* Container random_shuffle.
	* vformat method for string to allow implementation of custom printfs.

2004-07-28 Release 0.4-3
	* A ChangeLog! After all these years...
	* SIMD instruction support for fill and copy
	* matrix template (on top of tuple)
		3dNow! instructions are supported for vector transforms.
	* New utility templates
	    absv		- absolute value.
	    sign		- -1 for negative, 0 for 0, 1 for positive
	    abs_distance	- returns an absolute value of the difference.
	    distance		- now returns ptrdiff_t, as in SGI STL.
	    size_of_elements	- useful for working with static arrays in
				  templates; returns sizeof(T) * n.
	    pack_type		- useful for unrolling loops, packs a small
				  type into a big one.
	    alignof		- recommended alignment for a type (uses GCC
				  __alignof__ extension, if available)
	    eachfor		- same as foreach, but for reverse_iterator
	* get_temporary_buffer implemented using alloca and macros
	* Updated rotate to use alloca for small moves.
		This should speed up vector operations, like insert and erase.
	* Fixed copy_backward to actually copy backward rather than reverse.
	* Made resize virtual in memblock to properly handle strings.
	* sostream/sistream will handle wchar_t properly (as utf8 read/write)
	* ustring.cc: fixed multiple wchar_t insert
	* ustring.cc: changed allocation strategy to simply reserve the space
		for the null terminator instead of tweaking size() all the
		time. It's cleaner and saner this way.
	* benchmarking tool in bvt	
	* More functions implemented in bitset.
	* Added --with-static and --without-shared flags to configure.

2004-05-22 Release 0.4-2
	* ostringstreams will now correctly resize the buffer as needed.
	* Fixed floating point output
		(well, not really, just switched to using snprintf)

